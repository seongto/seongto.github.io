---
layout: post
title:  "TIL-16 : 유닛테스팅, 쿠키, 그리고 STASH !!!"
date:   2019-05-07 19:00:00 +0900
categories: TIL
---

왠지 이번 과제때는 유닛테스트를 돌려볼 기회가 없을 것 같다... 오늘은 배운게 참 많은데... 그 중에서 최고존엄은 git stash...!


## 오늘의 코드카타

오늘 코드카타는 평소 하던 방식으로 문제를 풀려다가, 귀찮아서 반대로 해보자라고 생각을 한번 했었고, 나름 꽤 더 좋은 방식으로 문제를 해결했다고 생각한다 +ㅁ+// 보람. 뿌듯.


## 유닛테스팅

Unit testing 이 UI나 Integratio testing에 비해 시간과 비용의 소요가 매우 적다. 문제가 생겼을 때에도 문제를 파악해서 수정하는 것이 매우 효율적이다. 한국에서 유닛테스트의 필요성에 대한 생각이 매우 약하다.

대부 송은우 님  가라사대,
`"유닛 테스트는 여러분의 방패이며, 코드는 칼입니다."`

- 성토는 테스트의 시작과 끝에 있는 Fixture의 개념을 이해하였다!
- 성토는 tearDown이 없을 경우 테스트 데이터가 연속되는 개념에 대해 아직 의문이 남았다.
- 성토는 플라스크에서의 유닛테스트와 pytest가 궁금해졌다!
- 성토는 프론트에서의 유닛테스트에 대해 매우 궁금해졌다!!
- 성토는 유닛테스트 모듈들을 어디에 설치하고 어디에 관리하는지 궁금해졌다!


## CORS 셋팅이 생각보다는 단순하지 않았다.

기존의 프론트 강의 때 사용한 방법으로는 보안상의 이슈가 발생하므로 특정 주소에만 허용을 해주는 형태로 진행하는 것이 옳다. 그걸 가능하게 하는 방법은 아래와 같다.

```
CORS_ORIGIN_WHITELIST = (
    'localhost:3000',
    '127.0.0.1:3000'
)
```

뭣도 모르고 `CORS_ORIGIN_ALLOW_ALL='localhost:3000',`라고 작성했었는데, 생각해보니 앞부분이랑 너무 맞지도 않는, 틀린 문법이고마... 하하하하

아무런 테스팅도 안하고 올렸다고 혼났다...


## jwt(jason web token)을 Local Storage에 저장하고 request를 header에 보내기

- 로컬이나 쿠키나 브라우져에 엑세스 토큰을 넣어두고,
- 매번 서버에 api request를 보낼 때마다 저장해둔 곳에서 불러와서 함께 헤더나 바디에 넣어서 보내주어야 한다.
- 저장할 때는 setItem, 가져올때는 getItem, 지울때는 removeItem.
- 액세스토큰은 storage에 저장되는 정보 중 하나일 뿐이다.


## git stash

- 성토는 그동안 git branch 활용을 이상하게 하고 있었다.
- 성토는 좌절에 빠졌다.
- 성토는 생각하던 바를 이루게 하기 위한 기능, stash 개념을 배웠다.
- git add 하고, 성토는 `git stash save <save point name>`을 시전하였다.
- 성토는 정신을 차렸다.


## 그 외...

그 외를 쓰는 날이 올줄이야...

- 현재 프로젝트에 대해 완전히 다른 형태로 이해하고 있었고, 각종 컴포넌트를 불러오고 작동시키는 원리를 오늘 드디어 완전히 깨달았다. 생각한 거랑 조금 다르긴 했지만, 더 쉬우니 별 문제없나...
- 백엔드 my_settings.py 파일 만들기 덕분에 처음으로 .gitignore 사용해봐야지 생각했는데, 이미 추가되어 있었다...

