---
layout: post
title:  "TIL-02 : 코드카타를 vim으로..."
date:   2019-04-18 19:00:00 +0900
categories: TIL
---


## 코드카타를 github에 푸쉬!

코드카타를 올린 레포에 콜레보레이터를 지정해달라는 예리님의 말씀을 듣고,  
처음에 repl에서 콜라보레이터 하라는 건가? 라고 생각하였다. 
설마... 깃헙 레포를 말하는 거겠어? 현실 도피를 하였다.
하지만 그것은 잠깐의 꿈이었을 뿐, 코드카타를 레포에 올려야하는 과제를 알게 됨.
그래서 깃헙에 레포를 새로 올리고, 다시 과제들 다 들어가서 목표랑 나의 코드를 복사한 후
각각의 js 파일들을 만들고 깃헙에 푸쉬까지 완료.

## 코드카타하는 김에 vim을 연습해볼까...?

어차피 코드카타 파일도 그날그날 만들어서 깃헙에 푸쉬까지 할 생각하니,
좀 귀찮은 일인데 나름 이걸 vim을 연습할 기회로 삼으면 어떨까 생각.
애초에 vim에서 코드카타 코드를 작성하고 그걸 그대로 푸쉬해버리는 것!
이를 위해 바로 셋팅 시작!

1. index.html 을 만들고 거기에 test.js 를 삽입하여 코드카타 실행에 사용.
2. vim에서 매번 코드카타를 풀고 크롬브라우져로 잘 돌아가는지 체크
3. 테스트 완료 후 test.js 이름을 변경한 후 commit.

## 로컬서버를 돌려보자

여기까지 구성하고나니 근데 확인을 어떻게 하지 라는 (불필요한) 의문이 생김.
왠지 로컬 서버를 돌려야할 것 같았다. 왠지 기분이 그랬다.
그래서 로컬 서버돌리는 방법을 검색해보았고 이미 설치된 python을 통해 쉽게 해결!

> `python -m http.server`

정상적으로 서버가 돌아가고 localhost:8000 을 통해 확인할 수 있게 되었다.
근데 이걸 해놓고 나니까... 왜 로컬호스트를 돌렸지???
그냥 index.html 실행시키면 되는건데... 어... 왜그랬을까...
python 으로 서버 돌리는 방법을 배운 것에서 일단 만족...

## node.js 로 더 쉽고 간편하게-

예리님께 터미널 안에서 확인할 수 있는 방법이 없을까요 문의했더니 node를 깔면 된다고 하셨다.
구글 파이어베이스 사용으로 인해 이미 나는 node가 깔려있었고, 아주 쉬운 걸 배움.

> `node test.js`

콘솔찍은 내용이 바로 출력되는 것을 확인! 수정중인 문서탭과 실행탭을 두개 띄워놓고 쓰면
별로 불편하지도 않고 일단 만족!

## 파이썬을 시작하였다.

- 변수선언 시 var, let, const 를 안 쓰니까 뭔가 실수한 기분, 폭탄을 든 기분, 그런 기분.
- 세미콜론을 안 쓰니까 뭔가 덜한 기분, 덜 닦은 기분, 그런 기분.
- 자바스크립트의 백틱 같은 요소로서 f(변수넣기)랑 """(줄나누기)를 쓴다.
- `elif`는 뭐랄까... 너무 축약했다고 생각한다.
- {}를 안쓰고 들여쓰기만으로 계층을 나눌때마다 나는 구속이 필요한 사람임을 느낀다.
- 뭔가 과제를 할 때마다 이후에나 배우는 것들을 이용해서 쉽게쉽게 해결하고 넘어가는 기분이다.
- 주석은 #로 처리하는 것인데... 이거 여러줄 한번에 # 달아주는거 안되나... command+/ 처럼..
- 공부하는데 이 [사이트](https://wikidocs.net/2)가 좀 도움이 좀 됐다.
- 한 문제 풀때마다 새로고침 하는 것... 번거롭다...
- 배열은 명령어가 좀 다르니 기록해두자.
  - 배열 뒤에 추가하고 싶을 땐 `<list>.append(<추가항목>)` 혹은 배열 붙이고 싶을 땐 + 로 붙이기!
  - 특정 위치에 추가하고 싶을 땐 `<list>.insert(idx, <추가항목>)` -> 여기서 idx는 추가하려는 인덱스 위치
  - JS의 slice()를 하고 싶을 땐, `<list>[start : stop : step]` -> 거의 동일하다.
  - 특정 인덱스의 데이터 지우고 싶을 땐, `del <list>[idx]` -> idx 없이 지울땐 <list>.remove(<지우고픈데이터>)
- turple이 예전에 배울때 저게 뭐람... 이랬는데 지금은 그냥 그렇구나 싶다. turple은 값 수정이 불가하다.
- set은 list랑은 확실히 다르다.
  - 동일한 값의 저장이 안된다. 같은 값이면 덮어씌우기 한다. 순서도 없는 상것이라 for문도 무작위로 돌린다. 
  - 새로운 요소를 추가할 때는 `<set>.add(<추가항목>)`을 쓴다. 삭제는 `remove()`를 쓴다.
  - set 끼리 교집합 `( a & b )`이나 합집합 `( a | b )`를 쓸수 있다.
- 드디어 Dictionaty가 나왔다. 예전에 정말 아따 복잡한그~ 하면서 배웠는데... 그때보단 나도 조금은 나아졌구나를 느낀다.
  - dic 도 set 처럼 중복된 값(dic:키) 인정이 안되고, 나중에 들어오는 값(dic:키)이 이전의 것을 덮어쓴다.
  - 새로운 값 추가는 `<dictionary>[new_key] = new_value`로 하며, 이미 같은 키가 있을 경우 해당 키의 값을 수정한다.
  - 삭제는 `del <dictionary>[key]`로 한다.
- 오늘은 Dictionary 까지!
  
파이썬 문제들을 쭈욱 풀다가 은우님의 개발 철학을 배울 수 있는 점이 있었는데, 임의로 표현하자면 null체크.
함수 안에 계산할 것들을 구현하기에 앞서 들어오는 parameter값을 한번 검증하고 가는 절차를 강제적으로 구현하도록 문제들을 만드셨다.
물론 현 예제들에서는 null같은건 나오지 않지만, 값이 없는 것들에 대한 대책을 먼저 깔고 시작하게 하는 습관을 만드는 것!
오류 상황 발생을 미리 대비할 수 있는 습관을 길러주는 예제들은 매우 좋았고, 배우며 성장하고 있음을 느끼는 순간이었다.
